 ## üìñ  Curso de Expresiones Regulares  üìñ  ## 
 
Son patrones en los que definimos que cadenas de caracteres entran o no entran en el patr√≥n dise√±ado.
Adem√°s de ser √∫tiles para quedarnos con parte de la informaci√≥n que necesitamos y descartamos la que no.

Al usar las expresiones regulares te ahorras la necesidad de traer una librer√≠a
 (que seguro tiene REGEX dentro para hacer la validaci√≥n)
 
 Es simplemente ir creando patrones d√≥nde cadenas de caracteres puedan ir 
 entrando o no, estos patrones nos sirven para atacar una l√≠nea o un input.
 
  ## üìú  Detalle de las de Expresiones Regulares  üìú  ## 
 
 > Las expresiones regulares pueden llegar a ser muy raras por la forma en la 
 que se ven, pero son muy √∫tiles. Aprender a usarlas nos ayuda en pocas palabras, 
 a buscar. Se diferencia del CTRL+F porque √©ste busca textos precisos y te arroja 
 el match. Con expresiones regulares es m√°s complejo, por ejemplo se pueden buscar 
 patrones (buscar todas las palabras que est√©n entre dos espacios, palabras que 
 empiecen con may√∫scula, encontrar la primer palabra de cada l√≠nea, etc)
 
> Se usa mucho en logs de servidores que son archivos enormes para analizarlos

>Las expresiones regulares son usadas tanto en frontend como en backend

  ## üìú Introducci√≥n al lenguaje de expresiones regulares üìú  ## 

Las expresiones regulares intentan solucionar problemas del d√≠a a d√≠a. Se intenta buscar la forma en que ciertos datos son presentados, por ejemplo un n√∫mero de tel√©fono dependiendo de pa√≠s y zona, tiene determinada cantidad de n√∫meros, a veces separados con guiones o puntos, pero la estructura siempre es la misma‚Ä¶
Otro ejemplo de uso de expresiones regulares ser√≠a intentar cambiar en un csv los precios de modo europeo a modo americano
Un d√≠gito se puede expresar con /d
Caracter de palabra: /w


## üìô ¬øQu√© es un archivo de texto, por ejemplo un CSV? üìô  ## 

¬øQu√© es una cadena de caracteres?

Es un car√°cter ASCII generalmente, seguido de otro car√°cter 
y de otro. No todos son visibles, el espacio por ejemplo. 

Cada car√°cter es un car√°cter.

Cada espacio en una cadena de texto se llena con un caracter, 
esto lo necesitamos tener perfectamente claro para comenzar a 
trabajar con expresiones regulares




Las clases predefinidas y construidas

El caracter (.): Encuentrame todo lo que sea un car√°cter


## üìô  Las clases predefinidas y construidas üìô  ##

- D√≠gitos: \d

Encuentra todos los d√≠gitos de 0 a 9.
\d es equivalente a poner [0-9].
Si en vez de \d, usamos por ejemplo [0-2] nos encontrar√° solamente los d√≠gitos de 0 a 2.

Podemos usar ‚Äú\D‚Äù para encontrar justo lo contrario, todo lo que no son d√≠gitos.

- Palabras: \w

Encuentra todo lo que puede ser parte de una palabra, tanto letras (min√∫sculas o may√∫sculas) como n√∫meros.
\w es equivalente a poner [a-zA-Z0-9_].
Si en vez de \w, usamos por ejemplo [a-zA-Z] nos encontrar√° solamente las letras.
Podemos usar ‚Äú\W‚Äù para encontrar justo lo contrario, todos los caracteres que no son parte de palabras.

- Espacios: \s

Encuentra todos los espacios (los saltos de l√≠nea tambi√©n son espacios).
Podemos usar ‚Äú\S‚Äù para encontrar justo lo contrario, todo lo que no son espacios.

//Solo permite colores hexadecimales 
#[a-fA-F0-9]{3,6}


Alt+92 = \
Alt+91 = [
Alt+93 = ]
Alt+62 = >
Alt+60 = <
Alt+125 = }
Alt+123 = {

## üìô   Los delimitadores: +, *, ?   üìô  ##

- (*) : Cero o m√°s veces
- (?): Cero o una sola vez
- (+): una o m√°s veces.
- Aplican al car√°cter o sentencia que preceden

## Ejemplos 
- [a-z]? : Esto es que puede estar una sola vez o no estar una letra minuscula de la (a) a la (z).
- \d*: Esto es que puede estar muchas veces o no estar un digito.
- \d+: Esto es que puede estar muchas veces o una sola vez un digito.

## Herramientas Online
- https://regex101.com/ 
- https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24 -> De manera grafica 
- https://www.debuggex.com/

## üìô    Los contadores {1,4}  üìô  ##


> Aplicando a un car√°cter que lo preceda se puede colocar entre llaves de esta 
forma, para indicarle que busque la cantidad deseada de caracteres. {Cota inferiror, Cota superior}

### Ejemplo:

- \d{0,2}: Esto buscara 0, 1, 2 d√≠gitos
- \d{2,2}: Esto buscara 2 d√≠gitos
- \d{2}: Esto buscara 2 d√≠gitos
- \d{2,}: Esto buscara 2 o m√°s d√≠gitos.
- \d{2,4}: Esto buscara 2, 3, 4 d√≠gitos.

- "\d{5}" -> 5 d√≠gitos.
- "\d{2,5}" -> Entre 2 y 5 d√≠gitos.
- "\d{4,}" -> De 4 a infinito d√≠gitos.

> mi expresion regular para buscar numero argentinos:
+54 388 5377055 -> [+]54?(\d{2,4}){2,4}

> mi expresion regular para buscar numero Venezuela:
+52 0239 224-1272 -> [+]52?[ ]?(\d{4})+[ ]?(\d{3})\-(\d{4}) -- Mejorado -> ^[+]52?[-\s]?(\d{4})+[-]?(\d{3})\-(\d{4})$ 

> mi expresion regular para buscar numero M√©xico:
+58 55 1234-1234 -> [+]58?(\d{2}){4}\-{4}


[0]?\d{2,4}[\-\. ]?\d{2,4}[\-\. ]?\d{2,4}[\-\. ]?\d{2,4}[\-\. ]?\d{2}
> Traducci√≥n: ** Puede o no empezar con cero, {luego lleva un grupo de d√≠gitos que puede variar entre 2 y 4 n√∫meros, luego puede o no tener ‚Äú-‚Äù, ‚Äú.‚Äù o ‚Äú ‚Äù } (x4) tiene un grupo de n√∫meros de 2 d√≠gitos.

> Otra forma de buscar telefonos queremos parejas de dos √≥ tres digitos, que continue que no sea numeros y letras  -> ^\+?(\d{2,3}\W?){3,4}([pe#]\d{1,3})?$


## üìô   El caso de (?) como delimitador üìô  ##


> *? Coincide con el elemento anterior cero o m√°s veces, pero el menor n√∫mero de veces que sea posible.
> +? Coincide con el elemento anterior una  o m√°s veces, pero el menor n√∫mero de veces que sea posible.
> ?? Coincide con el elemento anterior cero o una vez, pero el menor n√∫mero de veces que sea posible.

## Notas 
> La funci√≥n de (?) como delimitador conciste justamente en delimitar a la menor cantidad posible de los matches. **

> Solo como comentario‚Ä¶en el v√≠deo y luego en el examen mencionan el car√°cter ? C√≥mo ‚Äúgreedy‚Äù ‚Ä¶ 
	Y en verdad debe ser ‚Äúlazy‚Äù ‚Ä¶al principio del v√≠deo si se explica as√≠, luego cambia de lazy a 
	greedy y en el examen queda como ‚Äúgreedy‚Äù pero el comportamiento correcto es ‚Äúlazy‚Äù ‚Ä¶ Me gust√≥ el curso
	
> el caracter ? es un delimitador cuando esta antecedido por el +, para encontrar la minima ocurrencia posible. 
	Si no tiene el mas, ya no es delimitador sino simbolo de ocurrencia de cero a una vez.	
## Ejemplos 
	
Usos de ?

- Para expresar que pueden o no haber cierto caracter ejemplo: \d[a-zA-z]? 
	(Indica busqueda de un digito y despues puede haber o no una letra)

- Como delimitador, es decir; busca los grupos m√°s peque√±os posibles segun 
la condicion dada ejemplo: \d\d+? (Busca subgrupos de dos numeros)	


## üìô   Not (^), su uso y sus peligros üìô  ##

> Este caracter nos permite negar una clase o construir ‚Äúanticlases‚Äù, vamos a llamarlo as√≠, que es: toda la serie de caracteres que no queremos que entren en nuestro resultado de b√∫squeda.

> Este caracter nos permite negar una clase o construir 
‚Äúanticlases‚Äù, vamos a llamarlo as√≠, que es: toda la serie 
de caracteres que no queremos que entren en nuestro 
resultado de b√∫squeda.

## Ejemplo

- Para esto definimos una clase, por ejemplo: [ 0-9 ], y la negamos [ ^0-9 ] 
- Para buscar aquello que no tenga corchetes claro lo escapa  [^\[] 


### Notas

- Siempre hay que ponerlos al principio de la clase. -> [ ^0-9 ]
- Aclarar que el ‚Äúgorrito‚Äù (^) solo funciona como negaci√≥n cuando est√° dentro de los corchetes [ ] estando a fuera significa otra cosa jeje en dos v√≠deos siguiente nos damos cuenta
- Presiona la tecla "Alt" en tu teclado, y no la sueltes. 
- Sin dejar de presionar "Alt", presiona en el teclado num√©rico el n√∫mero "94", que es el n√∫mero de la letra o s√≠mbolo "^" en el c√≥digo ASCII.
- El signo ^ es llamado: Acento circunflejo
- Este solo sirve como negaci√≥n si se encuentra dentro de un [ ]
- \t ‚Äî Representa un tabulador.
- \r ‚Äî Representa el ‚Äúretorno de carro‚Äù o ‚Äúregreso al inicio‚Äù o sea el lugar en que la l√≠nea vuelve a iniciar.
- \n ‚Äî Representa la ‚Äúnueva l√≠nea‚Äù el car√°cter por medio del cual una l√≠nea da inicio. Es necesario recordar que en Windows es necesaria una combinaci√≥n de \r\n para comenzar una nueva l√≠nea, mientras que en Unix solamente se usa \n y en Mac_OS cl√°sico se usa solamente \r.
- \a ‚Äî Representa una ‚Äúcampana‚Äù o ‚Äúbeep‚Äù que se produce al imprimir este car√°cter.
- \e ‚Äî Representa la tecla ‚ÄúEsc‚Äù o ‚ÄúEscape‚Äù
- \f ‚Äî Representa un salto de p√°gina
- \v ‚Äî Representa un tabulador vertical
- \x ‚Äî Se utiliza para representar caracteres ASCII o ANSI si conoce su c√≥digo. De esta forma, si se busca el s√≠mbolo de derechos de autor y la fuente en la que se busca utiliza el conjunto de caracteres Latin-1 es posible encontrarlo utilizando ‚Äú\xA9‚Äù.
- \u ‚Äî Se utiliza para representar caracteres Unicode si se conoce su c√≥digo. ‚Äú\u00A2‚Äù representa el s√≠mbolo de centavos. No todos los motores de Expresiones Regulares soportan Unicode. El .Net Framework lo hace, pero el EditPad Pro no, por ejemplo.
- \d ‚Äî Representa un d√≠gito del 0 al 9.
- \w ‚Äî Representa cualquier car√°cter alfanum√©rico.
- \s ‚Äî Representa un espacio en blanco.
- \D ‚Äî Representa cualquier car√°cter que no sea un d√≠gito del 0 al 9.
- \W ‚Äî Representa cualquier car√°cter no alfanum√©rico.
- \S ‚Äî Representa cualquier car√°cter que no sea un espacio en blanco.
- \A ‚Äî Representa el inicio de la cadena. No un car√°cter sino una posici√≥n.
- \Z ‚Äî Representa el final de la cadena. No un car√°cter sino una posici√≥n.
- \b ‚Äî Marca la posici√≥n de una palabra limitada por espacios en blanco, puntuaci√≥n o el inicio/final de una cadena. -> ‚ÄúMe gusta aprender en Platzi‚Äù  -> /\bPl/ -> Estar√≠as buscando las palabras que empiecen con ‚ÄúPl‚Äù |||||   /tzi\b/ ->  Estar√≠as buscando todas las palabras que terminen en ‚Äútzi‚Äù ->  https://www.w3schools.com/jsref/jsref_regexp_begin.asp
- \B ‚Äî Marca la posici√≥n entre dos caracteres alfanum√©ricos o dos no-alfanum√©ricos..


## üìô   Principio (^) y final de linea ($) üìô  ##

Estos dos caracteres indican en qu√© posici√≥n de la l√≠nea debe hacerse la b√∫squeda:
el ^ se utiliza para indicar el principio de l√≠nea
el $ se utiliza para indicar final de l√≠nea

## Ejemplo

- Busca inicio palabras con plus cero o una vez y al final solo sea 3 veces ->^\w+,\w+,\w+$
- Busca inicio palabras con plus cero o una vez y al final solo sea 3 veces -> ^(\w+,?){3,3}$
- Hay una manera de no comenzar en el inicio, sino en una posicion x de la linea ^.{n}(tu-regex)$
- Numeros y letras (555658,56-58-11, 56.58.11,56.78-98  )-> ^(\d\d[^a-zA-Z]?){3}$
- Use esta expresi√≥n para encontrar las lineas del LOG que tenga IPs -> ^.*(\d{2,3}[.]?){4,4}.*$
- Buscar en un LOG ->  ^\[LOG.* \[ERROR\].*$ 
- Busar usuarios en log -> ^\[LOG.*\] \[LOG\].*user:@\w+?\] .*$
- Buscar Ips -> (\d{1,3}\.){3,3}(\d{1,3})
- Buscar Fechas con mes del nombre -> ^.*(\d{1,2}\/\w+\/\d{4,4}).*$

## üìô  URLs ($) üìô  ##
> Expresi√≥n para validar urls muy buena para cuando deseas permitir guardar enlaces en tus post 

## Ejemplos 

-  Url Completa -> https?:\/\/[\w\-\.]+\.\w{2,5}\/?\S*  
- Otra forma -> (https?://)?(www\.)?[A-z0-9_\.]+\.[A-z]{2,3}\/?.*
                   
- Url hasta el TLD -> https?:\/\/[\w\-\.]+\.\w{2,5}
- Lista top de los .com https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains 
- 